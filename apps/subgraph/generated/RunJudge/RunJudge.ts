// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ChallengeCreated extends ethereum.Event {
  get params(): ChallengeCreated__Params {
    return new ChallengeCreated__Params(this);
  }
}

export class ChallengeCreated__Params {
  _event: ChallengeCreated;

  constructor(event: ChallengeCreated) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get distance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get entryFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ChallengeJoined extends ethereum.Event {
  get params(): ChallengeJoined__Params {
    return new ChallengeJoined__Params(this);
  }
}

export class ChallengeJoined__Params {
  _event: ChallengeJoined;

  constructor(event: ChallengeJoined) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ParticipantSlashed extends ethereum.Event {
  get params(): ParticipantSlashed__Params {
    return new ParticipantSlashed__Params(this);
  }
}

export class ParticipantSlashed__Params {
  _event: ParticipantSlashed;

  constructor(event: ParticipantSlashed) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ResultSubmitted extends ethereum.Event {
  get params(): ResultSubmitted__Params {
    return new ResultSubmitted__Params(this);
  }
}

export class ResultSubmitted__Params {
  _event: ResultSubmitted;

  constructor(event: ResultSubmitted) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stravaActivityId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WinnerDeclared extends ethereum.Event {
  get params(): WinnerDeclared__Params {
    return new WinnerDeclared__Params(this);
  }
}

export class WinnerDeclared__Params {
  _event: WinnerDeclared;

  constructor(event: WinnerDeclared) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get prize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RunJudge__challengesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: Address;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: Address,
    value5: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getStartTime(): BigInt {
    return this.value0;
  }

  getDistance(): BigInt {
    return this.value1;
  }

  getEntryFee(): BigInt {
    return this.value2;
  }

  getIsActive(): boolean {
    return this.value3;
  }

  getWinner(): Address {
    return this.value4;
  }

  getTotalPrize(): BigInt {
    return this.value5;
  }
}

export class RunJudge__participantsResult {
  value0: boolean;
  value1: boolean;
  value2: BigInt;

  constructor(value0: boolean, value1: boolean, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getHasJoined(): boolean {
    return this.value0;
  }

  getHasSubmitted(): boolean {
    return this.value1;
  }

  getStravaActivityId(): BigInt {
    return this.value2;
  }
}

export class RunJudge extends ethereum.SmartContract {
  static bind(address: Address): RunJudge {
    return new RunJudge("RunJudge", address);
  }

  agent(): Address {
    let result = super.call("agent", "agent():(address)", []);

    return result[0].toAddress();
  }

  try_agent(): ethereum.CallResult<Address> {
    let result = super.tryCall("agent", "agent():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  challengeParticipants(challengeId: BigInt, param1: BigInt): Address {
    let result = super.call(
      "challengeParticipants",
      "challengeParticipants(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(challengeId),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_challengeParticipants(
    challengeId: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "challengeParticipants",
      "challengeParticipants(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(challengeId),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  challenges(challengeId: BigInt): RunJudge__challengesResult {
    let result = super.call(
      "challenges",
      "challenges(uint256):(uint40,uint32,uint256,bool,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(challengeId)],
    );

    return new RunJudge__challengesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toAddress(),
      result[5].toBigInt(),
    );
  }

  try_challenges(
    challengeId: BigInt,
  ): ethereum.CallResult<RunJudge__challengesResult> {
    let result = super.tryCall(
      "challenges",
      "challenges(uint256):(uint40,uint32,uint256,bool,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(challengeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RunJudge__challengesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toAddress(),
        value[5].toBigInt(),
      ),
    );
  }

  createChallenge(
    startTime: BigInt,
    distance: BigInt,
    entryFee: BigInt,
  ): BigInt {
    let result = super.call(
      "createChallenge",
      "createChallenge(uint40,uint32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(distance),
        ethereum.Value.fromUnsignedBigInt(entryFee),
      ],
    );

    return result[0].toBigInt();
  }

  try_createChallenge(
    startTime: BigInt,
    distance: BigInt,
    entryFee: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createChallenge",
      "createChallenge(uint40,uint32,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(distance),
        ethereum.Value.fromUnsignedBigInt(entryFee),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextChallengeId(): BigInt {
    let result = super.call(
      "nextChallengeId",
      "nextChallengeId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_nextChallengeId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextChallengeId",
      "nextChallengeId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  participants(
    challengeId: BigInt,
    participant: Address,
  ): RunJudge__participantsResult {
    let result = super.call(
      "participants",
      "participants(uint256,address):(bool,bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(challengeId),
        ethereum.Value.fromAddress(participant),
      ],
    );

    return new RunJudge__participantsResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBigInt(),
    );
  }

  try_participants(
    challengeId: BigInt,
    participant: Address,
  ): ethereum.CallResult<RunJudge__participantsResult> {
    let result = super.tryCall(
      "participants",
      "participants(uint256,address):(bool,bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(challengeId),
        ethereum.Value.fromAddress(participant),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RunJudge__participantsResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBigInt(),
      ),
    );
  }

  usdc(): Address {
    let result = super.call("usdc", "usdc():(address)", []);

    return result[0].toAddress();
  }

  try_usdc(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdc", "usdc():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _usdc(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _agent(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateChallengeCall extends ethereum.Call {
  get inputs(): CreateChallengeCall__Inputs {
    return new CreateChallengeCall__Inputs(this);
  }

  get outputs(): CreateChallengeCall__Outputs {
    return new CreateChallengeCall__Outputs(this);
  }
}

export class CreateChallengeCall__Inputs {
  _call: CreateChallengeCall;

  constructor(call: CreateChallengeCall) {
    this._call = call;
  }

  get startTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get distance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get entryFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateChallengeCall__Outputs {
  _call: CreateChallengeCall;

  constructor(call: CreateChallengeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DeclareWinnerCall extends ethereum.Call {
  get inputs(): DeclareWinnerCall__Inputs {
    return new DeclareWinnerCall__Inputs(this);
  }

  get outputs(): DeclareWinnerCall__Outputs {
    return new DeclareWinnerCall__Outputs(this);
  }
}

export class DeclareWinnerCall__Inputs {
  _call: DeclareWinnerCall;

  constructor(call: DeclareWinnerCall) {
    this._call = call;
  }

  get challengeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get winner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeclareWinnerCall__Outputs {
  _call: DeclareWinnerCall;

  constructor(call: DeclareWinnerCall) {
    this._call = call;
  }
}

export class JoinChallengeCall extends ethereum.Call {
  get inputs(): JoinChallengeCall__Inputs {
    return new JoinChallengeCall__Inputs(this);
  }

  get outputs(): JoinChallengeCall__Outputs {
    return new JoinChallengeCall__Outputs(this);
  }
}

export class JoinChallengeCall__Inputs {
  _call: JoinChallengeCall;

  constructor(call: JoinChallengeCall) {
    this._call = call;
  }

  get challengeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class JoinChallengeCall__Outputs {
  _call: JoinChallengeCall;

  constructor(call: JoinChallengeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAgentCall extends ethereum.Call {
  get inputs(): SetAgentCall__Inputs {
    return new SetAgentCall__Inputs(this);
  }

  get outputs(): SetAgentCall__Outputs {
    return new SetAgentCall__Outputs(this);
  }
}

export class SetAgentCall__Inputs {
  _call: SetAgentCall;

  constructor(call: SetAgentCall) {
    this._call = call;
  }

  get _agent(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAgentCall__Outputs {
  _call: SetAgentCall;

  constructor(call: SetAgentCall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get challengeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get cheater(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }
}

export class SubmitResultCall extends ethereum.Call {
  get inputs(): SubmitResultCall__Inputs {
    return new SubmitResultCall__Inputs(this);
  }

  get outputs(): SubmitResultCall__Outputs {
    return new SubmitResultCall__Outputs(this);
  }
}

export class SubmitResultCall__Inputs {
  _call: SubmitResultCall;

  constructor(call: SubmitResultCall) {
    this._call = call;
  }

  get challengeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get stravaActivityId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubmitResultCall__Outputs {
  _call: SubmitResultCall;

  constructor(call: SubmitResultCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
